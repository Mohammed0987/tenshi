# Modules are deliberately flattened out and described separately to make
# searching/filtering easier with Angular.
- name: '_G'
  type: 'module'
  desc: >
    This is the Lua global module. Functions in here are directly accessible
    in your program. For example, you may directly write recv(<mailbox>) in
    your code.
- name: 'install_trap_global'
  type: 'function'
  module: '_G'
  desc: >
    This function is intended to be called automagically in some
    autogenerated code. It is not intended to be manually called.
    When this function is called, a global hooks is installed so
    that creating additional global variables raises a warning.
- name: 'get_device'
  type: 'function'
  module: '_G'
  desc: >
    Returns a sensor or actuator object corresponding to the smartsensor
    device with serial number “id.” This function can be called manually,
    but the intended use for this function is for it to be called in an
    autogenerated header. TBD: No error is raised if the device is not found.
    However, any subsequent access to the device will raise an error.
- name: 'start_actor'
  type: 'function'
  module: '_G'
  desc: >
    Returns an actor object corresponding to an actor running function
    callable.
- name: 'send'
  type: 'function'
  module: '_G'
  desc: >
    Atomically dispatch values to mailboxes. This may unblock and cause a
    switch to an actor waiting on the mailbox. Mailboxes can send values to
    other actors or to actuators. This may raise errors in xxx tbd. Objects
    XXX TBD may be restricted to only strings, numbers, and tables containing
    these types. This function does not return anything. If options is passed,
    options must be a table that can contain any of the following fields:
    * timeout - numeric timeout in units of xxx, or -1 for infinite
    * xxx todo
- name: 'recv'
  type: 'function'
  module: '_G'
  desc: >
    Block and receive one item from any of the passed-in mailboxes.
    Returns the received values. Mailboxes can come from other actors and
    from sensors via triggers. This may raise errors in xxx tbd. If options
    is passed, options must be a table that can contain any of the following
    fields:
    * timeout - numeric timeout in units of xxx, or -1 for infinite
    * xxx todo
- name: 'get_own_actor'
  type: 'function'
  module: '_G'
  desc: >
    Returns the actor object corresponding to the currently-executing actor.
- name: 'create_mailbox'
  type: 'function'
  module: '_G'
  desc: >
    Creates a new mailbox that is a combination of the passed-in mailboxes.
    When data is sent to a combined mailbox, it is atomically sent to all of
    the passed-in mailboxes. When data is received from a combined mailbox,
    any item from any mailbox will be returned from recv() in the order they
    are received.

- name: 'units'
  type: 'module'
  desc: >
    In general, the Tenshi API tries to use consistent units throughout.
    If possible, sensors and actuators will use units of
    cm, g, s, radians, %, Newtons, Volts, milliamps (i.e. a mix of
    SI and SI-compatible units). The units module contains various constants
    for converting other units into these units.
- name: 'mega'
  type: 'field'
  module: 'units'
  desc: Equal to 10^6
- name: 'kilo'
  type: 'field'
  module: 'units'
  desc: Equal to 10^3
- name: 'mili'
  type: 'field'
  module: 'units'
  desc: Equal to 10^-3
- name: 'micro'
  type: 'field'
  module: 'units'
  desc: Equal to 10^-6
- name: 'nano'
  type: 'field'
  module: 'units'
  desc: Equal to 10^-9
- name: 'inch'
  type: 'field'
  module: 'units'
  desc: Equal to 2.54
- name: 'pound'
  type: 'field'
  module: 'units'
  desc: Equal to 453.592
- name: 'deg'
  type: 'field'
  module: 'units'
  desc: Equal to pi/180

- name: 'pieles'
  type: 'module'
  desc: >
    This module is used to communicate with PiELES, the driver station UI.
- name: 'get_channel'
  type: 'function'
  module: 'pieles'
  desc: >
    Returns a signal corresponding to the PiELES channel named “name.”
    The method of associating names with physical joysticks and/or buttons
    is currently TBD. Raises an error if the channel name is not found.

- name: 'game'
  type: 'module'
  desc: >
    This module is contains information about the game state.
- name: 'gamestate'
  type: 'field'
  module: 'game'
  desc: >
    Signal representing the current game state. Is a string.
    Current possible values are “autonomous” “teleoperated” and “disabled”
- name: 'color'
  type: 'field'
  module: 'game'
  desc: >
    Signal representing the current team color as a string.
    Either “Yellow” or “Blue.”

- name: 'triggers'
  type: 'module'
  desc: >
    The triggers module contains functions that create trigger objects
    (which are a subclass of mailbox objects) from signal objects.
    Because a signal is an abstract representation of a physical quantity,
    it is not possible to wait directly on a signal. In order to receive data
    from a signal, we must select an appropriate trigger to convert it into
    discretized data.
- name: 'sampled'
  type: 'function'
  module: 'triggers'
  desc: >
    Returns a trigger object that triggers always and captures 1 sample each
    time. In other words, an actor that blocks on this will be triggered on
    every sample.
- name: 'changed'
  type: 'function'
  module: 'triggers'
  desc: >
    Returns a trigger object that triggers when the signal changes and
    captures 1 sample each time.

- name: 'Actor'
  type: 'type'
  desc: >
    Actor objects represent an actor (running or stopped) and allow
    interacting with it.
- name: 'stop'
  type: 'method'
  containing_type: 'Actor'
  desc: >
    Forcefully terminates the actor and stops its execution.
- name: 'send'
  type: 'method'
  containing_type: 'Actor'
  desc: >
    Sends the data in valueArray to the actor’s inbox. This is equivalent to
    calling the global send but without having to pass the same actor
    repeatedly.

- name: 'Signal'
  type: 'type'
  desc: >
    Signal objects are an abstract representation of a physical quantity.
    Only sensor objects contain signals.
- name: 'value'
  type: 'bound_field'
  containing_type: 'Signal'
  desc: >
    Allows asynchronous access to the value of a signal.
    Reading sensors via value will give the latest received data. 
    However, there is no guarantee how recent this data is.

- name: 'Mailbox'
  type: 'type'
  desc: >
    Mailbox objects represent an mailbox, which is a message-passing mechanism
    used throughout the API for both interacting between actors and interfacing
    with external hardware.
- name: 'send'
  type: 'method'
  containing_type: 'Mailbox'
  desc: >
    Sends the data in valueArray to the mailbox. This is equivalent to calling
    the global send but without having to pass the same actor repeatedly.
- name: 'recv'
  type: 'method'
  containing_type: 'Mailbox'
  desc: >
    Receives one item from the mailbox. This is equivalent to calling the
    global recv.

- name: 'Trigger'
  type: 'type'
  desc: >
    Trigger objects allow signal “traits” to be converted into mailboxes.
    Trigger is a subclass of mailbox. TBD what additional fields trigger
    objects will contain.

- name: 'Sensor'
  type: 'type'
  desc: >
    Sensors represent a connected sensor device. They primarily consist of a
    signal “trait.” There may be additional fields in the sensor object
    depending on the type of sensor. These will be used for things such as
    calibration settings. TODO

- name: 'Actuator'
  type: 'type'
  desc: >
    Actuators represent a connected actuator device. Actuators are a subclass
    of mailbox. However, recv() on an actuator will raise an error. There may
    be additional fields in the actuator object depending on the type of
    actuator. These will be used for things such as calibration settings. TODO
- name: 'value'
  type: 'bound_field'
  containing_type: 'Actuator'
  desc: >
    Writing data to an actuator will store the data into some buffer to be
    sent to the device. However, it is not guaranteed that all data written
    to value will arrive at the actuator. It is guaranteed that some of the
    data will arrive, but it is unspecified what data. For guaranteed delivery,
    use send(). Using both send() and value will produce undefined behavior.
